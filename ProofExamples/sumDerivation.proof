begin proof derivationSum 
    [ especificacion: sum@xs = 〈∑ x : 0 ≤ x ∧ x < #xs : xs.x 〉 ]
    induction in xs for 
        sum@xs 
        .=. 
        case xs of [] -> 0 (y ▹ ys) -> y + (sum@ys) end
    where
basic
[] -> sum@[]
      = { especificacion }
      〈 ∑ x : 0 ≤ x ∧ x < #[] : [].x 〉
      = { Longitud de la lista vacía }
      〈 ∑ x : 0 ≤ x ∧ x < 0 : [].x 〉
      = { Intervalo Vacío }
     〈 ∑ x : False : [].x 〉
      = { Rango Vacío Sumatoria }
      0
induction y ▹ ys with hypind -> sum@(y ▹ ys)
                                = { especificacion }
                                〈 ∑ x : 0 ≤ x ∧ x < #(y ▹ ys) : (y ▹ ys).x〉
                                = { Longitud de lista no vacía }
                                〈 ∑ x : 0 ≤ x ∧ x < succ (#ys) : (y ▹ ys).x〉
                                = { Aritmética en Intervalo }
                                〈 ∑ x : x = 0 ∨ (0 < x ∧ x < succ (#ys)) : (y ▹ ys).x〉
                                = { Partición de Rango Sumatoria }
                                〈 ∑ x : x = 0 : (y ▹ ys).x 〉 + 〈 ∑ x : 0 < x ∧ x < succ (#ys) : (y ▹ ys).x 〉
                                = { Rango Unitario Sumatoria }
                                ((y ▹ ys).0) + 〈 ∑ x : 0 < x ∧ x < succ (#ys) : (y ▹ ys).x〉
                                = { Proyectar el elemento inicial }
                                y + 〈 ∑ x : 0 < x ∧ x < succ (#ys) : (y ▹ ys).x〉
                                = { Relación entre < y ≤ }
                                y + 〈 ∑ x : succ 0 ≤ x ∧ x < succ (#ys) : (y ▹ ys).x〉
                                = { Reindizado Sumatoria }
                                y + 〈 ∑ x : 0 ≤ x ∧ x < #ys : (y ▹ ys).(succ x)〉
                                = { Proyectar el elemento (i+1) }
                                y + 〈 ∑ x : 0 ≤ x ∧ x < #ys : ys.x〉
                                = { especificacion }
                                y + (sum@ys)
end proof       

